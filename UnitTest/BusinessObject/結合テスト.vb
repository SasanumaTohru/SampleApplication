Imports SampleApplication.BusinessObject.商品
Imports SampleApplication.FoundationObject
Imports SampleApplication.PrimitiveObject

<TestClass()> Public Class 結合テスト

    <TestMethod()> Public Sub 結合テスト()

        'テストの準備==============================================
        TestDataSetup.指定した商品IDが存在する場合には削除する("333333")
        Dim TDS As New TestDataSetup
        TDS.適用価格テーブルをクリアする("333333")
        '=====================================================

        '新しい商品を追加する
        Dim 新しい商品 As New 商品(
            New 商品ID("333333", 商品ID.コンストラクタオプション.生成),
            New メーカー(New メーカーID(2)),
            New 名称("4Kビデオカメラ"),
            New 分類(New 分類コード(3)),
            New 単位(単位.単位リスト.台)
            )
        Dim 取扱商品 As New 取扱商品()
        取扱商品.追加する(新しい商品)

        'その商品の価格を設定する
        Dim 仕入価格 As New 適用価格.価格(
            新しい商品.商品ID,
            適用価格.価格.区分リスト.仕入,
            New 金額(9800),
            New 日付(#4/1/2017#)
            )
        Dim 販売価格 As New 適用価格.価格(
            新しい商品.商品ID,
            適用価格.価格.区分リスト.販売,
            New 金額(10000),
            New 日付(#4/1/2017#)
            )
        Dim 価格適用のスケジュール As New 適用価格.スケジュール
        With 価格適用のスケジュール
            .追加する(仕入価格)
            .追加する(販売価格)
        End With

        '2017/04/01の商品価格を参照する
        Dim 参照する商品 As New 商品ID("333333")
        Assert.AreEqual(
            "\10,000",
            取扱商品.商品(参照する商品).価格(適用価格.価格.区分リスト.販売, New 日付(#4/1/2017#)).円マーク付書式
            )
        '未来の商品価格を参照する
        Assert.AreEqual(
            "\10,000",
            取扱商品.商品(参照する商品).価格(適用価格.価格.区分リスト.販売, New 日付(#7/1/2017#)).円マーク付書式
            )

        '商品ID=333333の価格を2017/05/01に改定する
        Dim 改訂後の販売価格 As New 適用価格.価格(
            New 商品ID("333333"),
            適用価格.価格.区分リスト.販売,
            New 金額(9980),
            New 日付(#5/1/2017#)
            )
        価格適用のスケジュール.追加する(改訂後の販売価格)
        '未来の商品価格を参照する
        Assert.AreEqual(
            "\9,980",
            取扱商品.商品(参照する商品).価格(適用価格.価格.区分リスト.販売, New 日付(#7/1/2017#)).円マーク付書式
            )
        '再び2017/04/01の商品価格を参照する
        Assert.AreEqual(
            "\10,000",
            取扱商品.商品(参照する商品).価格(適用価格.価格.区分リスト.販売, New 日付(#4/1/2017#)).円マーク付書式
            )

    End Sub

    <TestMethod> <TestCategory("ユースケース")> Public Sub 商品を探す()
        '商品分類の一覧を参照する
        Dim 商品分類 As New 分類リスト
        For Each 項目 In 商品分類.リスト
            Debug.Print(項目.名称.値)
        Next

        '商品分類を選択する
        Dim 選択した商品分類 As New 分類コード(3)

        '選択した分類の商品を参照する
        Dim 取扱商品 As New 取扱商品(選択した商品分類)
        Debug.Print("取扱商品.指定した分類の商品数.値 : " & 取扱商品.指定した分類の商品数.値)

        'リストのページ情報
        Debug.Print("取扱商品.リストのページ.現在のページ番号 : " & 取扱商品.リストのページ.現在のページ番号.値)
        Debug.Print("取扱商品.リストのページ.最後のページ番号 : " & 取扱商品.リストのページ.最後のページ番号.値)

        '商品のリストを見る
        For Each カレント商品 In 取扱商品.リスト(ページ.ページ操作リスト.最初のページ)
            Debug.Print(カレント商品.名称.値)
        Next
        Debug.Print("取扱商品.読み込まれた商品の数.値 : " & 取扱商品.現在のページの商品数.値)

        '　次のページ
        Debug.Print("次のページ")
        For Each カレント商品 In 取扱商品.リスト(ページ.ページ操作リスト.次のページ)
            Debug.Print(カレント商品.名称.値)
        Next
        '　次のページ
        Debug.Print("次のページ")
        For Each カレント商品 In 取扱商品.リスト(ページ.ページ操作リスト.次のページ)
            Debug.Print(カレント商品.名称.値)
        Next
        '　前のページ
        Debug.Print("前のページ")
        For Each カレント商品 In 取扱商品.リスト(ページ.ページ操作リスト.前のページ)
            Debug.Print(カレント商品.名称.値)
        Next
        '　最初のページ
        Debug.Print("最初のページ")
        For Each カレント商品 In 取扱商品.リスト(ページ.ページ操作リスト.最初のページ)
            Debug.Print(カレント商品.名称.値)
        Next
        '　最後のページ
        Debug.Print("最後のページ")
        For Each カレント商品 In 取扱商品.リスト(ページ.ページ操作リスト.最後のページ)
            Debug.Print(カレント商品.名称.値)
        Next

    End Sub


End Class